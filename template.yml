AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Serverless patterns - AppSync to DynamoDB

Resources:
  # Define a DynamoDB table
  TodoTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String

  # AppSync Role
  DynamoDBRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - appsync.amazonaws.com
      Policies:
        - PolicyName: DDBAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: !GetAtt TodoTable.Arn

  # AppSync API - The GraphQL API for the Notes App
  AppSyncApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: TodoApi
      XrayEnabled: true
      AuthenticationType: API_KEY

  # API Key for external access
  AppSyncApiKey:
    Type: AWS::AppSync::ApiKey
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId

  # AppSync Schema
  AppSyncSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      Definition: |
        type Todo {
          id: ID!
          body: String
        }
        type PaginatedTodos {
          todos: [Todo!]!
          nextToken: String
        }
        type Query {
          getAllTodos(limit: Int, nextToken: String): PaginatedTodos!
          getTodo(id: ID!): Todo
        }
        type Mutation {
          saveTodo(body: String!): Todo
          deleteTodo(id: ID!): Todo
        }
        type Schema {
          query: Query
          mutation: Mutation
        }

  # AppSync Data Source for DynamoDB
  AppSyncTodoDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      Name: TodoDataSource
      ApiId: !GetAtt AppSyncApi.ApiId
      Description: "The Todo Table AppSync Data Source"
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt DynamoDBRole.Arn
      DynamoDBConfig:
        TableName: !Ref TodoTable
        AwsRegion: !Sub ${AWS::Region}

  # Resolver: Query - Get All Todos
  AppSyncGetAllTodosQueryResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Query
      FieldName: getAllTodos
      DataSourceName: !GetAtt AppSyncTodoDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "Scan",
          "limit": $util.defaultIfNull(${ctx.args.limit},20),
          "nextToken": $util.toJson(${ctx.args.nextToken})
        }
      ResponseMappingTemplate: |
        {
          "todos": $util.toJson($ctx.result.items),
          "nextToken": $util.toJson(${ctx.args.nextToken})
        }

  # Resolver: Query - get one Todo record
  AppSyncGetTodoQueryResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Query
      FieldName: getTodo
      DataSourceName: !GetAtt AppSyncTodoDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "GetItem",
          "key": {
            "id": $util.dynamodb.toDynamoDBJson($ctx.args.id)
          }
        }
      ResponseMappingTemplate: "$util.toJson($ctx.result)"

  # Resolver: Mutation - Save Todos
  AppSyncSaveTodoMutationResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Mutation
      FieldName: saveTodo
      DataSourceName: !GetAtt AppSyncTodoDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "PutItem",
          "key": {
            "id": $util.dynamodb.toDynamoDBJson($util.autoId())
          },
          "attributeValues": {
            "body": $util.dynamodb.toDynamoDBJson($ctx.args.body)
          },
          "condition": {
            "expression": "attribute_not_exists(#id)",
            "expressionNames": {"#id": "id"},
          }
        }
      ResponseMappingTemplate: "$util.toJson($ctx.result)"

  # Resolver: Mutations - Delete note
  AppSyncDeleteTodoMutationResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Mutation
      FieldName: deleteTodo
      DataSourceName: !GetAtt AppSyncTodoDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "DeleteItem",
          "key": {
            "id": $util.dynamodb.toDynamoDBJson($ctx.args.id)
          }
        }
      ResponseMappingTemplate: "$util.toJson($ctx.result)"

Outputs:
  GraphQLApiEndpoint:
    Description: The URL to the GraphQL Endpoint
    Value: !GetAtt AppSyncApi.GraphQLUrl
  APIKey:
    Description: API Key for using the GraphQL endpoint. (header key name 'x-api-key')
    Value: !GetAtt AppSyncApiKey.ApiKey
